@import "breakpoints";
@import "colors";

.header {
  $padding: 1em;

  background: white;
  padding: $padding $padding 0; // Bottom padding applied by ::after.
  text-align: center;

  &-home-link {
    color: black;
    display: block;
    text-decoration: none;

    &:hover, &:focus, &:active {
      text-decoration: underline;
    }

    &:active {
      color: red;
    }
  }

  &-logo {
    &-image {
      width: 100%;
      max-width: 20em;
      display: block;
      margin: 0 auto;
    }
  }

  &-summary {
    $font-size: 1.5em;
    $line-height: 2em / $font-size * 1em; // Multiply by 1em for unit.

    font-size: $font-size;
    line-height: $line-height;
    margin-top: ($line-height - $font-size) / -2;
    text-decoration: inherit; // IDK why this needs to be specified.

    // In here because need access to $font-size
    @include big {
      max-width: 17em / $font-size * 1em;
    }

    // Used to specify a phrase a user agent should prefer to keep on the same
    // line when possible.
    &-line {
      display: inline-block;
      text-decoration: inherit; // see above
    }
  }

  &-navigation {
    margin-top: 1em;

    &-link {
      &-replaceable {
        font-size: 0;
      }

      &.facebook {
        &:after {
          content: "F";
        }
      }

      &.twitter {
        &:after {
          content: "T";
        }
      }
    }
  }

  &:after {
    // Draw background.
    // Without parentheses Sass will interpret it as $padding - $padding (= 0).
    margin: $padding (-$padding) 0;
    content: "";
    display: block;
    height: 3em;
    background: url(/images/border-h.png);
  }


  $width: 33%;
  $inner-width: 17em;
  $border-width: 3em;
  $padding-left: $border-width;
  $padding-right: $padding + 1em;

  @include big {
    width: $width;
    margin: 0;
    padding: 5% $padding-left 0 $padding-right;
    float: left;
    box-sizing: border-box;
    position: relative;
    min-height: 100%;

    &:after {
      margin: 0;
      background-image: url(/images/border-v.png);
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      width: $border-width;
      height: auto;
    }

    &-logo {
      max-width: 17em;
      margin: 1em auto 0;
    }

    &-summary {
      // max-width set above
      margin: 0 auto;
    }

    &-navigation {
      $height: 3em;

      margin: $height auto;
      max-width: 17em;

      &-link {
        $font-size: 1.2em;
        $height: $height / $font-size * 1em; // Multiply by 1em for unit.
        $navigation-padding: $padding + 1em;
        color: inherit;
        font-size: $font-size;
        height: $height;
        line-height: $height;
        display: block;
        position: relative;
        margin: 0 1em;

        // The [class] is to bump specifity and override the text replacement
        // applied to .header-navigation-link outside the breakpoint.
        //
        // Note that since this is nested inside a class selector, adding the
        // [class] is tautologous â€” the only effect it has is increasing
        // specificity.
        &[class]:after, &:last-child:before {
          content: "";
          display: block;
          height: 1px;
          background: #ccc;
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
        }

        &:last-child:before {
          // Equivalent to having another link with a border on the top row
          // of pixels.
          top: 100%;
        }

        @for $i from 1 through length($lgbt-pride-colors) {
          &:nth-child(#{length($lgbt-pride-colors)}n + #{$i}) {
            &:hover, &:focus {
              color: nth($lgbt-pride-colors, $i);
            }
          }
        }

        &-replaceable {
          font-size: 1em;
        }
      }
    }
  }
}
